// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOAuthIdentity = `-- name: CreateOAuthIdentity :one
INSERT INTO oauth_identities (
  provider_user_id, provider, user_id
) VALUES (
  $1, $2, $3
)
RETURNING provider_user_id, provider, user_id, created_at
`

type CreateOAuthIdentityParams struct {
	ProviderUserID string
	Provider       string
	UserID         pgtype.UUID
}

func (q *Queries) CreateOAuthIdentity(ctx context.Context, arg CreateOAuthIdentityParams) (OauthIdentity, error) {
	row := q.db.QueryRow(ctx, createOAuthIdentity, arg.ProviderUserID, arg.Provider, arg.UserID)
	var i OauthIdentity
	err := row.Scan(
		&i.ProviderUserID,
		&i.Provider,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO auth (
  username, email, password_hash
) VALUES (
  $1, $2, $3
)
RETURNING id, username, email, created_at, last_updated
`

type CreateUserParams struct {
	Username     string
	Email        string
	PasswordHash pgtype.Text
}

type CreateUserRow struct {
	ID          pgtype.UUID
	Username    string
	Email       string
	CreatedAt   pgtype.Timestamptz
	LastUpdated pgtype.Timestamptz
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Username, arg.Email, arg.PasswordHash)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM auth
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getOAuthIdentity = `-- name: GetOAuthIdentity :one
SELECT provider_user_id, provider, user_id, created_at FROM oauth_identities
WHERE provider_user_id = $1 AND provider = $2
`

type GetOAuthIdentityParams struct {
	ProviderUserID string
	Provider       string
}

func (q *Queries) GetOAuthIdentity(ctx context.Context, arg GetOAuthIdentityParams) (OauthIdentity, error) {
	row := q.db.QueryRow(ctx, getOAuthIdentity, arg.ProviderUserID, arg.Provider)
	var i OauthIdentity
	err := row.Scan(
		&i.ProviderUserID,
		&i.Provider,
		&i.UserID,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, created_at, last_updated FROM auth
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Auth, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password_hash, created_at, last_updated FROM auth
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (Auth, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, email, password_hash, created_at, last_updated FROM auth
WHERE username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (Auth, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.LastUpdated,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :exec
UPDATE auth
  SET email = $2,
  last_updated = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserEmailParams struct {
	ID    pgtype.UUID
	Email string
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) error {
	_, err := q.db.Exec(ctx, updateUserEmail, arg.ID, arg.Email)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE auth
  SET password_hash = $2,
  last_updated = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserPasswordParams struct {
	ID           pgtype.UUID
	PasswordHash pgtype.Text
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.Exec(ctx, updateUserPassword, arg.ID, arg.PasswordHash)
	return err
}

const updateUserUsername = `-- name: UpdateUserUsername :exec
UPDATE auth
  SET username = $2,
  last_updated = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserUsernameParams struct {
	ID       pgtype.UUID
	Username string
}

func (q *Queries) UpdateUserUsername(ctx context.Context, arg UpdateUserUsernameParams) error {
	_, err := q.db.Exec(ctx, updateUserUsername, arg.ID, arg.Username)
	return err
}
